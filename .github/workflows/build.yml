# StayReal. Continuous Integration, created by @yannouuuu, maintained by its contributors
name: 'StayReal. | Build Desktop and Mobile package'

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'
jobs:
  build-desktop:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install pnpm
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate

      - name: Install dependencies
        run: pnpm install

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        run: pnpm install

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: ${{ matrix.args }}
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: StayReal-${{ matrix.platform }}
          path: |
            src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/*.dmg
            src-tauri/target/x86_64-apple-darwin/release/bundle/macos/*.app

            src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/*.dmg
            src-tauri/target/aarch64-apple-darwin/release/bundle/macos/*.app

            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/rpm/*.rpm
            src-tauri/target/release/bundle/appimage/*.AppImage

            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe
          if-no-files-found: ignore

  build-mobile:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'ubuntu-22.04'
            target: 'android'
          # - platform: 'macos-latest'
          #   target: 'ios'
        
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
        
      - name: Install pnpm
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate

      - name: Setup Java
        if: matrix.target == 'android'
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Android SDK & NDK
        if: matrix.target == 'android'
        uses: android-actions/setup-android@v3

      - name: Install Android NDK
        if: matrix.target == 'android'
        run: |
          echo "y" | sdkmanager --install "ndk;25.2.9519653"
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> $GITHUB_ENV
          echo "NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> $GITHUB_ENV

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install Android dependencies
        if: matrix.target == 'android'
        run: |
          rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android
          cargo install cargo-ndk
          
      - name: Install dependencies
        run: pnpm install

      - name: Build Android App
        if: matrix.target == 'android'
        env:
          NDK_HOME: ${{ env.NDK_HOME }}
        run: |
          pnpm tauri android init
          pnpm tauri android build
          
      - name: Upload Android artifacts
        if: matrix.target == 'android'
        uses: actions/upload-artifact@v3
        with:
          name: StayReal-Android
          path: |
            src-tauri/gen/android/app/build/outputs/bundle/universalRelease/*.apk
            src-tauri/gen/android/app/build/outputs/apk/universal/release/*.apk
          if-no-files-found: warn

  create-release:
    needs: [build-desktop, build-mobile]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' # Only run on main/master branch
    steps:
      - uses: actions/checkout@v4

      - name: Get version from Cargo.toml
        id: get_version
        run: |
          version=$(grep '^version = ' src-tauri/Cargo.toml | cut -d '"' -f2)
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: releases

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: true
          files: |
            releases/**/*.dmg
            releases/**/*.app
            releases/**/*.deb
            releases/**/*.rpm
            releases/**/*.AppImage
            releases/**/*.msi
            releases/**/*.exe
            releases/**/*.apk
          body: |
            Pre-release version v${{ steps.get_version.outputs.version }}
            
            **Note**: This is an automated pre-release build. Use with caution.
            
            ### Included Artifacts:
            - Desktop builds for Windows, macOS (Intel & Apple Silicon), and Linux
            - Android build